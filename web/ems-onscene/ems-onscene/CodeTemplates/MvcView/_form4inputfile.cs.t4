<#@ template language="C#" HostSpecific="True"  debug="true" #>
<#@ output extension=".cshtml" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Linq" #>
<#@ include file="Imports.include.t4" #>
@model <#= ViewDataTypeName #>
@{
    string _controllerName = HttpContext.Current.Request.RequestContext.RouteData.Values["controller"].ToString().ToLower();
}
<script>
    var iframe@(_controllerName)@(Request["pageid"])loaded = function (that) {
        var $iframe = $('#iframe@(_controllerName)@(Request["pageid"])');
        if ($iframe.length > 0) {
            var _innerDocument = $iframe[0].contentDocument;
            var _innerHtml = $(_innerDocument).find('body').html();
            if (_innerHtml !== '') {
                var $targetElement = $iframe.parent().parent();
                $targetElement.html($(_innerDocument).find('body').html());
                applyKendoUI($targetElement[0]);
            }
        }
    }
</script>
<iframe id="iframe@(_controllerName)@(Request["pageid"])" name="iframe@(_controllerName)@(Request["pageid"])" style="width:1px;height:1px;display:none;" src="/home/empty" onload="iframe@(_controllerName)@(Request["pageid"])loaded(this)"></iframe>
<#
string boolType = "System.Boolean";
Version requiredMvcVersion = new Version("5.1.0.0");
bool isControlHtmlAttributesSupported = MvcVersion >= requiredMvcVersion;
var relatedProperties = ModelMetadata.RelatedEntities.ToDictionary(item => item.AssociationPropertyName);

int _cnt = 0;
bool _close = true;
foreach (PropertyMetadata property in ModelMetadata.Properties) {
    if (property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly && !property.IsAssociation) {

        // If the property is a primary key and Guid, then the Guid is generated in the controller. Hence, this propery is not displayed on the view.
        if (property.IsPrimaryKey && IsPropertyGuid(property)) {
            continue;
        }
		if (_cnt % 2 == 0)
		{
#>
<div class="row">
<#
			_close = false;
		}
        if (property.IsForeignKey) {
#>
    @Html.LabelFor(model => model.<#= property.PropertyName #>, "<#= InsertSpaceCamelCase(GetAssociationName(property)) #>", htmlAttributes: new { @class = "control-label col-md-2" })
<#
        } else {
#>
    @Html.LabelFor(model => model.<#= property.PropertyName #>, "<#= InsertSpaceCamelCase(property.PropertyName) #>", htmlAttributes: new { @class = "control-label col-md-2" })
<#
        }
#>
    <div class="col-md-3">
<#
        bool isCheckbox = property.TypeName.Equals(boolType);
		bool isDateTimeType = property.TypeName.Equals("System.DateTime");
        if (property.IsForeignKey && property.IsPrimaryKey) {
#>
        @Html.HiddenFor(model=>model.<#= property.PropertyName #>)
<#
		}
		else if (property.IsForeignKey)
		{
			var relatedProperty = relatedProperties.Values.FirstOrDefault(m=>m.ForeignKeyPropertyNames.First() == property.PropertyName);
			if (relatedProperty != null) {
#>
        @Html.Partial("_inputwithgridsearch", new ViewDataDictionary() {
        { "fieldname", "<#= property.PropertyName #>" }
        , { "displayfieldname", "<#= relatedProperty.DisplayPropertyName #>"}
        , { "fieldnametopick", "<#= relatedProperty.PrimaryKeyNames.First() #>" }
        , { "displayfieldnametopick", "<#= relatedProperty.DisplayPropertyName #>" }
        , { "value", Model.<#= property.PropertyName #> }
        , { "displayvalue", Model.<#= relatedProperty.AssociationPropertyName #> == null?string.Empty:Model.<#= relatedProperty.AssociationPropertyName #>.<#= relatedProperty.DisplayPropertyName #> }
        , { "searchfields", "<#= relatedProperty.DisplayPropertyName #>" }
        , { "searchfieldnames", "<#= relatedProperty.DisplayPropertyName #>" }
        , { "odatasourceurl", "/odata/<#= relatedProperty.EntitySetName #>?$select=<#= relatedProperty.PrimaryKeyNames.First() #>,<#= relatedProperty.DisplayPropertyName #>" }
        , { "gridcolumns", "[{\"field\":\"<#= relatedProperty.PrimaryKeyNames.First() #>\", \"title\":\"<#= relatedProperty.PrimaryKeyNames.First() #>\"}, {\"field\":\"<#= relatedProperty.DisplayPropertyName #>\", \"title\":\"<#= relatedProperty.DisplayPropertyName #>\"} ]" }
        , {"pagesize", "6" }
        , { "required", "required" }
		, { "positioncontrol", "fixed" }
    })
<# 
				if (isControlHtmlAttributesSupported) {
#>
        @*@Html.DropDownList("<#= property.PropertyName #>", null, htmlAttributes: new { @class = "form-control" })*@
<#
				} else {
#>
        @*@Html.DropDownList("<#= property.PropertyName #>", String.Empty)*@
<#
				}
			}
#>
<#
        } else  if (isControlHtmlAttributesSupported) {
            if (isCheckbox) {
#>
        <div class="checkbox">
<#
                PushIndent("    ");
#>
        @Html.EditorFor(model => model.<#= property.PropertyName #>)
<#
            } else if (property.IsEnum && !property.IsEnumFlags) {
#>
        @Html.EnumDropDownListFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "form-control" })
<#
            } else {
#>
        @Html.EditorFor(model => model.<#= property.PropertyName #>, new { htmlAttributes = new { @class = "<#=isDateTimeType?"kendodatepickerauto":"form-control"#>", datatype="<#=property.TypeName#>" } })
<#
            } 
        } else {
#>
        @Html.EditorFor(model => model.<#= property.PropertyName #>)
<#
        }
#>
<# 
        if (isControlHtmlAttributesSupported) {
#>
        @Html.ValidationMessageFor(model => model.<#= property.PropertyName #>, "", new { @class = "text-danger" })
<#        
        } else {
#>
        @Html.ValidationMessageFor(model => model.<#= property.PropertyName #>)
<#      
        }
#>
<#
        if (isCheckbox && isControlHtmlAttributesSupported) {
            PopIndent();
#>
        </div>
<#
        }
#>
    </div>
<#
		if (_cnt % 2 == 1)
		{
#>
</div>

<#
			_close = true;
		}
		_cnt++;
    }
}
if (_close != true)
{
#>
	</div>
<#
}
#>
<div class="hide">
	<input type="hidden" name="pageid" value="@Request["pageid"]" />
</div>
@Html.Partial("_formexecutionresultmessage")
<#@ include file="ModelMetadataFunctions.cs.include.t4" #>